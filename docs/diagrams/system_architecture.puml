@startuml
"User" as user

node "Client Interfaces" {
  component "CLI" as CLI
  component "FastAPI API" as FastAPI
  component "A2A API" as A2A
  component "FastMCP" as FastMCP
  component "Streamlit GUI" as Streamlit
  component "Monitor" as Monitor
}

node "Core Components" {
  component "Orchestrator" as Orchestrator
  component "ConfigLoader" as ConfigLoader
  component "Error Hierarchy" as Errors
  component "Metrics Collector" as Metrics
  component "Resource Monitor" as ResourceMonitor
  component "Tracing" as Tracing
  component "KG Reasoning" as KGReasoning
  component "Visualization" as Visualization
  component "Ray Executor" as RayExecutor
}

package "Agents" {
  component "Agent Factory" as AgentFactory
  component "Agent Registry" as AgentRegistry
  component "Prompt Templates" as PromptTemplates

  component "Synthesizer" as Synthesizer
  component "Contrarian" as Contrarian
  component "Fact-Checker" as FactChecker

  component "Agent Mixins" as AgentMixins
}

package "LLM Integration" {
  component "LLM Registry" as LLMRegistry
  component "LLM Adapters" as LLMAdapters
  component "Token Counting" as TokenCounting
}

package "Storage & Search" {
  component "Storage Manager" as StorageManager
  component "DuckDB Backend" as DuckDBBackend
  component "Search" as Search
  component "Vector Search" as VectorSearch
  component "File Loader" as FileLoader
  component "Git Repo Indexer" as GitRepoIndexer
  component "Local File Backend" as LocalFileBackend
  component "Git Backend" as GitBackend
  component "VSS Extension Loader" as VSSExtensionLoader
  component "Storage Backup" as StorageBackup

  database "NetworkX Graph" as NX
  database "DuckDB Store" as DuckDB
  database "RDFLib Store" as RDF
  database "TinyDB Cache" as TinyDB
}

package "Output Formatting" {
  component "Output Formatter" as OutputFormatter
  component "Synthesis" as Synthesis
}

user -> CLI : search(query)
CLI -> Orchestrator : run_query(query)

user -> FastAPI : POST /query
FastAPI -> Orchestrator : run_query(query)

user -> A2A : POST /query
A2A -> Orchestrator : run_query(query)

user -> Streamlit : interactive query
Streamlit -> Orchestrator : run_query(query)

user -> FastMCP : MCP message
FastMCP -> Orchestrator : run_query(query)

user -> Monitor : interactive session
Monitor -> Orchestrator : run_query(query)
Monitor -> ResourceMonitor : collect metrics

Orchestrator -> ConfigLoader : load_config()
ConfigLoader --> Orchestrator : config

Orchestrator -> Metrics : record_metrics()
Orchestrator -> Tracing : trace_execution()
Orchestrator <-> Errors : handle_errors()

Orchestrator -> AgentFactory : get(agent_name)
AgentFactory -> AgentRegistry : get_class(agent_name)
AgentFactory --> Orchestrator : agent_instance

AgentFactory -> PromptTemplates : get_prompt_template()
AgentMixins <-- Synthesizer : uses
AgentMixins <-- Contrarian : uses
AgentMixins <-- FactChecker : uses

Orchestrator -> Synthesizer : execute()
Orchestrator -> Contrarian : execute()
Orchestrator -> FactChecker : execute()

Synthesizer -> LLMAdapters : generate()
Contrarian -> LLMAdapters : generate()
FactChecker -> LLMAdapters : generate()

LLMAdapters -> TokenCounting : count_tokens()
LLMAdapters -> LLMRegistry : get_adapter()

Orchestrator -> StorageManager : persist_claim()
StorageManager -> NX : add_node/add_edge
StorageManager -> DuckDB : insert
StorageManager -> RDF : add
StorageManager -> TinyDB : insert
StorageManager -> DuckDBBackend : use_backend()
StorageManager -> VSSExtensionLoader : load_extension()
StorageManager -> StorageBackup : backup()
StorageManager -> KGReasoning : run_reasoner()

Orchestrator -> Search : search()
Search -> VectorSearch : vector_search()
Search -> FileLoader : load_files()
Search -> GitRepoIndexer : index_repo()
Search -> LocalFileBackend
Search -> GitBackend
VectorSearch -> DuckDB : query

Orchestrator -> OutputFormatter : format_result()
OutputFormatter -> Synthesis : build_answer()/build_rationale()
Orchestrator -> Visualization : visualize_results()
Orchestrator --> RayExecutor : delegate distributed cycles
@enduml
