from __future__ import annotations

from os import PathLike
from typing import Any, Protocol, Sequence


class Error(Exception): ...


class DuckDBPyRelation(Protocol):
    def fetchall(self) -> list[tuple[Any, ...]]: ...

    def fetchone(self) -> tuple[Any, ...]: ...

    def execute(
        self, query: str, parameters: Sequence[Any] | None = ...
    ) -> DuckDBPyRelation: ...


class DuckDBPyConnection:
    def execute(
        self, query: str, parameters: Sequence[Any] | None = ...
    ) -> DuckDBPyRelation: ...

    def cursor(self) -> DuckDBPyConnection: ...

    def close(self) -> None: ...

    def commit(self) -> None: ...

    def rollback(self) -> None: ...

    def table(self, name: str) -> DuckDBPyRelation: ...

    def sql(self, query: str) -> DuckDBPyRelation: ...

    def register(self, name: str, value: Any) -> None: ...

    def unregister(self, name: str) -> None: ...

    def install_extension(self, name: str) -> None: ...

    def load_extension(self, name: str) -> None: ...


def connect(
    database: str | PathLike[str] | None = ...,
    read_only: bool = ...,
    config: dict[str, Any] | None = ...,
) -> DuckDBPyConnection: ...


__all__ = ["DuckDBPyConnection", "DuckDBPyRelation", "Error", "connect"]
