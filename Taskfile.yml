version: '3'

set:
  - e

vars:
  COVERAGE_THRESHOLD: 90

tasks:
  install:
    vars:
      EXTRAS: "{{.EXTRAS | default \"\"}}"
    cmds:
      - |
          if ! command -v task >/dev/null 2>&1; then
              echo "Go Task missing; installing into .venv/bin..."
              mkdir -p .venv/bin
              if ! curl -sSL https://taskfile.dev/install.sh \
                  | sh -s -- -b .venv/bin; then
                  echo "Failed to install Go Task. Run scripts/setup.sh." >&2
                  exit 1
              fi
              export PATH="$(pwd)/.venv/bin:$PATH"
          fi
      - >
          uv sync --extra dev-minimal{{if .EXTRAS}} --extra {{.EXTRAS}}{{end}}
      - uv run python -c "import pytest_httpx, tomli_w, redis"
      - uv run flake8 src tests
    desc: |
      Initialize dev env with minimal tools.
      Set EXTRAS="test nlp ui" to include optional features:
      analysis, distributed, git, llm, minimal, nlp, parsers, ui, vss, test
  check-env:
    cmds:
      - uv run python scripts/check_env.py
      - >
          uv run python -c 'import pytest_httpx' ||
          (echo "pytest-httpx missing; run 'task install'." && exit 1)
      - >
          uv run python -c 'import tomli_w' ||
          (echo "tomli-w missing; run 'task install'." && exit 1)
      - >
          uv run python -c 'import redis' ||
          (echo "redis missing; run 'task install'." && exit 1)
    desc: "Validate required tool versions"
  check:
    deps: [check-env]
    # Minimal validation for quick feedback. Skips slow tests and scenarios
    # requiring optional UI (`.[ui]`) or VSS (`.[vss]`) extras.
    cmds:
      - uv run flake8 src tests
      - uv run mypy src
      - uv run python scripts/check_spec_tests.py
      - uv run pytest tests/unit -q
      - >
          uv run pytest tests/integration -m "not slow and not requires_ui and
          not requires_vss and not requires_distributed" -q
      - uv run pytest --rootdir=. tests/behavior -q
    desc: "Run lint, type check, and fast tests"
  unit:
    cmds:
      - uv run pytest tests/unit -q
    desc: "Run unit tests with uv"

  integration:
    cmds:
      - >
          uv run pytest tests/integration -m "not slow and not requires_ui and
          not requires_vss and not requires_distributed" -q
    desc: "Run integration tests without slow/UI/VSS scenarios with uv"

  behavior:
    cmds:
      - uv run pytest --rootdir=. tests/behavior -q
    desc: "Run BDD (behavior) tests with uv"

  test:
    deps: [test:unit, test:integration, test:behavior]
    desc: "Run all tests"

  test:unit:
    cmds:
      - uv run pytest tests/unit -q
    desc: "Run unit tests with uv"

  test:integration:
    cmds:
      - >
          uv run pytest tests/integration -m "not slow and not requires_ui and
          not requires_vss and not requires_distributed" -q
    desc: "Run integration tests without slow/UI/VSS scenarios with uv"

  test:behavior:
    cmds:
      - uv run pytest --rootdir=. tests/behavior -q
    desc: "Run BDD (behavior) tests with uv"

  test:all:
    # Full run before releases. Includes slow tests but continues to skip
    # UI and VSS scenarios unless the `ui` or `vss` extras are installed.
    cmds:
      - >
          uv run pytest -m 'not requires_ui and not requires_vss and not
          requires_distributed' -q
    desc: "Run all tests including slow ones (UI/VSS scenarios skipped)"

  test:fast:
    # Minimal test run used for rapid iteration. Excludes slow tests and any
    # requiring UI (`.[ui]`) or VSS (`.[vss]`) extras.
    cmds:
      - >
          uv run pytest -m 'not slow and not requires_ui and not requires_vss
          and not requires_distributed'
    desc: "Run tests excluding slow/UI/VSS scenarios with uv"

  test:slow:
    # Executes only slow tests while skipping UI (`.[ui]`) and VSS (`.[vss]`)
    # scenarios unless those extras are installed.
    cmds:
      - >
          uv run pytest -m 'slow and not requires_ui and not requires_vss and
          not requires_distributed'
    desc: "Run slow tests excluding UI/VSS scenarios with uv"

  test:benchmarks:
    cmds:
      - uv run pytest tests/integration/test_query_performance_benchmark.py -q
    desc: "Run performance benchmark tests with uv"

  coverage:
    cmds:
      - uv run pytest tests/unit --cov=src --cov-report=term-missing --cov-append
      - >
          uv run pytest tests/integration -m 'not requires_ui and not requires_vss
          and not requires_distributed' --cov=src --cov-report=term-missing
          --cov-append
      - uv run pytest --rootdir=. tests/behavior --cov=src --cov-report=xml --cov-report=term-missing \
          --cov-append
      - uv run coverage report --fail-under={{.COVERAGE_THRESHOLD}}
      - uv run python scripts/check_token_regression.py --threshold 5
    desc: "Run full test suite with coverage reporting"

  verify:
    deps: [check-env]
    # Coverage-enabled check before committing.
    cmds:
      - uv run flake8 src tests
      - uv run mypy src
      - uv run python scripts/check_spec_tests.py
      - >
          uv run pytest tests/targeted --noconftest
          --cov=autoresearch.search
          --cov=autoresearch.storage
          --cov=autoresearch.orchestration
          --cov-report=term-missing --cov-report=xml
      - uv run coverage html
      - uv run coverage report --fail-under={{.COVERAGE_THRESHOLD}}
      - uv run python scripts/check_token_regression.py --threshold 5
    desc: "Run linting, type checks, targeted tests, and coverage"

  clean:
    cmds:
      - find . -type d -name '__pycache__' -exec rm -rf {} +
      - find . -type d -name '.mypy_cache' -exec rm -rf {} +
    desc: "Remove Python cache directories"

  bump-version:
    cmds:
      - uv run python scripts/bump_version.py {{.CLI_ARGS}}
    desc: "Update project version numbers"

  check-baselines:
    cmds:
      - uv run python scripts/check_token_regression.py --threshold 5
    desc: "Validate token usage against baselines with uv"

  wheels:
    deps: [wheel-linux, wheel-windows, wheel-macos]
    desc: "Build wheels for all platforms"

  wheel-linux:
    cmds:
      - uv run cibuildwheel --platform linux --output-dir dist/linux
    desc: "Build Linux wheel with uv"

  wheel-windows:
    cmds:
      - uv run cibuildwheel --platform windows --output-dir dist/windows
    desc: "Build Windows wheel with uv"

  wheel-macos:
    cmds:
      - uv run cibuildwheel --platform macos --output-dir dist/macos
    desc: "Build macOS wheel with uv"

