version: '3'

set:
  - e

vars:
  COVERAGE_MINIMUM: 90
  ALL_EXTRAS: "nlp ui vss git distributed analysis llm parsers gpu"
  ALL_EXTRAS_NO_GPU: "nlp ui vss git distributed analysis llm parsers"
  VERIFY_BASE_EXTRAS: "dev-minimal test"

profiles:
  dev-minimal:
    desc: "Sync dev-minimal extras"

tasks:
  install:
    vars:
      EXTRAS: "{{.EXTRAS | default \"\"}}"
    cmds:
      - |
          if ! command -v task >/dev/null 2>&1; then
              install_dir="${TASK_INSTALL_DIR:-/usr/local/bin}"
              echo "Go Task missing; installing into $install_dir..."
              if ! curl -sSL https://taskfile.dev/install.sh \
                  | sh -s -- -b "$install_dir"; then
                  echo "Failed to install Go Task. Run scripts/setup.sh." >&2
                  exit 1
              fi
          fi
      - |
          extras="{{.VERIFY_BASE_EXTRAS}}"
          uv sync --python-platform x86_64-manylinux_2_28 \
              $(printf ' --extra %s' $extras) \
              {{if .EXTRAS}}{{range splitList " " .EXTRAS}} --extra {{.}}{{end}}{{end}} \
              {{if and .EXTRAS (contains .EXTRAS "gpu")}}--find-links wheels/gpu{{end}}
      - uv run python -c "import pytest_httpx, tomli_w, redis"
      - uv run flake8 src tests
    desc: |
      Initialize dev env with minimal extras.
      Syncs the dev-minimal and test extras by default.
      Provide optional groups with EXTRAS, e.g. "nlp" or "parsers".
      Set EXTRAS="gpu" to include optional GPU packages.
      Place matching wheels in wheels/gpu to avoid source builds.
  check-env:
    vars:
      EXTRAS: "{{.EXTRAS | default \"\"}}"
    env:
      EXTRAS: "{{.EXTRAS}}"
    cmds:
      - task --version
      - uv run python scripts/check_env.py
    desc: "Validate required tool versions"
  lint-specs:
    cmds:
      - uv run python scripts/lint_specs.py
    desc: "Audit spec files for required sections"
  check-release-metadata:
    cmds:
      - uv run python scripts/check_release_metadata.py
    desc: "Validate release version and date alignment"
  mypy:strict-suite:
    cmds:
      - uv run mypy --strict src tests
    desc: "Run mypy in strict mode across src and tests"

  mypy:behavior:
    cmds:
      - uv run mypy --strict tests/behavior
    desc: "Run strict mypy checks for behavior orchestrator modules"
  check:
    vars:
      EXTRAS: "{{.EXTRAS | default \"\"}}"
    # Minimal validation for quick feedback. Syncs the dev-minimal and test
    # extras and exercises version and CLI smoke tests. Skips slow tests and
    # scenarios requiring optional UI (`.[ui]`) or VSS (`.[vss]`) extras.
    cmds:
      - |
          uv sync \
            --python-platform x86_64-manylinux_2_28 \
            --extra dev-minimal \
            --extra test \
            {{if .EXTRAS}}{{range splitList " " .EXTRAS}} --extra {{.}}{{end}}{{end}}
      - task check-env EXTRAS="{{.EXTRAS}}"
      - uv run flake8 src
      - uv run mypy src # distributed modules included; no exclude flag
      - task lint-specs
      - task check-release-metadata
      - uv run python scripts/check_spec_tests.py
      - uv run pytest -c /dev/null tests/unit/test_version.py tests/unit/test_cli_help.py -q
    desc: "Run lint, type check, and selected fast tests"
  unit:
    cmds:
      - uv run pytest tests/unit -q
    desc: "Run unit tests with uv"

  integration:
    vars:
      EXTRAS: "{{.EXTRAS | default \"\"}}"
    cmds:
      - task: test:integration
        vars:
          EXTRAS: "{{.EXTRAS}}"
    desc: "Run integration tests with uv"

  behavior:
    cmds:
      - uv run pytest tests/behavior -q
    desc: "Run BDD (behavior) tests with uv"


  evaluation:truthfulqa:
    cmds:
      - |
          uv run autoresearch evaluate run truthfulqa{{if .LIMIT}} --limit {{.LIMIT}}{{end}}{{if .DRY_RUN}} --dry-run{{end}}
    desc: "Run the curated TruthfulQA evaluation harness"

  evaluation:fever:
    cmds:
      - |
          uv run autoresearch evaluate run fever{{if .LIMIT}} --limit {{.LIMIT}}{{end}}{{if .DRY_RUN}} --dry-run{{end}}
    desc: "Run the curated FEVER evaluation harness"

  evaluation:hotpotqa:
    cmds:
      - |
          uv run autoresearch evaluate run hotpotqa{{if .LIMIT}} --limit {{.LIMIT}}{{end}}{{if .DRY_RUN}} --dry-run{{end}}
    desc: "Run the curated HotpotQA evaluation harness"

  evaluation:all:
    cmds:
      - |
          uv run autoresearch evaluate run all{{if .LIMIT}} --limit {{.LIMIT}}{{end}}{{if .DRY_RUN}} --dry-run{{end}}
    desc: "Run all curated truthfulness evaluation harnesses"



  test:
    deps: [test:unit, test:integration, test:behavior]
    desc: "Run all tests"

  test:unit:
    vars:
      EXTRAS: "{{.EXTRAS | default \"\"}}"
      EXTRA_MARKERS: >-
        {{if not (contains .EXTRAS "git")}} and not requires_git{{end}}\
        {{if not (contains .EXTRAS "nlp")}} and not requires_nlp{{end}}\
        {{if not (contains .EXTRAS "ui")}} and not requires_ui{{end}}\
        {{if not (contains .EXTRAS "vss")}} and not requires_vss{{end}}\
        {{if not (contains .EXTRAS "distributed")}} and not requires_distributed{{end}}\
        {{if not (contains .EXTRAS "analysis")}} and not requires_analysis{{end}}\
        {{if not (contains .EXTRAS "llm")}} and not requires_llm{{end}}\
        {{if not (contains .EXTRAS "parsers")}} and not requires_parsers{{end}}\
        {{if not (contains .EXTRAS "gpu")}} and not requires_gpu{{end}}
    cmds:
      - uv run pytest tests/unit -m 'not slow{{.EXTRA_MARKERS}}' -q
    desc: "Run unit tests with uv"

  test:integration:
    vars:
      EXTRAS: "{{.EXTRAS | default \"\"}}"
      EXTRA_MARKERS: >-
        {{if not (contains .EXTRAS "git")}} and not requires_git{{end}}\
        {{if not (contains .EXTRAS "nlp")}} and not requires_nlp{{end}}\
        {{if not (contains .EXTRAS "ui")}} and not requires_ui{{end}}\
        {{if not (contains .EXTRAS "vss")}} and not requires_vss{{end}}\
        {{if not (contains .EXTRAS "distributed")}} and not requires_distributed{{end}}\
        {{if not (contains .EXTRAS "analysis")}} and not requires_analysis{{end}}\
        {{if not (contains .EXTRAS "llm")}} and not requires_llm{{end}}\
        {{if not (contains .EXTRAS "parsers")}} and not requires_parsers{{end}}\
        {{if not (contains .EXTRAS "gpu")}} and not requires_gpu{{end}}
    cmds:
      - >
          uv run pytest tests/integration -m 'not slow{{.EXTRA_MARKERS}}' -q
    desc: "Run integration tests without slow scenarios with uv"

  test:behavior:
    vars:
      EXTRAS: "{{.EXTRAS | default \"\"}}"
      EXTRA_MARKERS: >-
        {{if not (contains .EXTRAS "git")}} and not requires_git{{end}}\
        {{if not (contains .EXTRAS "nlp")}} and not requires_nlp{{end}}\
        {{if not (contains .EXTRAS "ui")}} and not requires_ui{{end}}\
        {{if not (contains .EXTRAS "vss")}} and not requires_vss{{end}}\
        {{if not (contains .EXTRAS "distributed")}} and not requires_distributed{{end}}\
        {{if not (contains .EXTRAS "analysis")}} and not requires_analysis{{end}}\
        {{if not (contains .EXTRAS "llm")}} and not requires_llm{{end}}\
        {{if not (contains .EXTRAS "parsers")}} and not requires_parsers{{end}}\
        {{if not (contains .EXTRAS "gpu")}} and not requires_gpu{{end}}
    cmds:
      - uv run pytest tests/behavior -m 'not slow{{.EXTRA_MARKERS}}' -q
    desc: "Run BDD (behavior) tests with uv"

  test:all:
    # Full run before releases. Includes slow tests but continues to skip
    # UI and VSS scenarios unless the `ui` or `vss` extras are installed.
    vars:
      EXTRAS: "{{.EXTRAS | default \"\"}}"
      EXTRA_MARKERS: >-
        {{if not (contains .EXTRAS "git")}} and not requires_git{{end}}\
        {{if not (contains .EXTRAS "nlp")}} and not requires_nlp{{end}}\
        {{if not (contains .EXTRAS "ui")}} and not requires_ui{{end}}\
        {{if not (contains .EXTRAS "vss")}} and not requires_vss{{end}}\
        {{if not (contains .EXTRAS "distributed")}} and not requires_distributed{{end}}\
        {{if not (contains .EXTRAS "analysis")}} and not requires_analysis{{end}}\
        {{if not (contains .EXTRAS "llm")}} and not requires_llm{{end}}\
        {{if not (contains .EXTRAS "parsers")}} and not requires_parsers{{end}}\
        {{if not (contains .EXTRAS "gpu")}} and not requires_gpu{{end}}
    cmds:
      - >
          uv run pytest -m '(not slow or slow){{.EXTRA_MARKERS}}' -q
    desc: "Run all tests including slow ones"

  test:fast:
    # Minimal test run used for rapid iteration. Excludes slow tests and any
    # requiring UI (`.[ui]`) or VSS (`.[vss]`) extras.
    vars:
      EXTRAS: "{{.EXTRAS | default \"\"}}"
      EXTRA_MARKERS: >-
        {{if not (contains .EXTRAS "git")}} and not requires_git{{end}}\
        {{if not (contains .EXTRAS "nlp")}} and not requires_nlp{{end}}\
        {{if not (contains .EXTRAS "ui")}} and not requires_ui{{end}}\
        {{if not (contains .EXTRAS "vss")}} and not requires_vss{{end}}\
        {{if not (contains .EXTRAS "distributed")}} and not requires_distributed{{end}}\
        {{if not (contains .EXTRAS "analysis")}} and not requires_analysis{{end}}\
        {{if not (contains .EXTRAS "llm")}} and not requires_llm{{end}}\
        {{if not (contains .EXTRAS "parsers")}} and not requires_parsers{{end}}\
        {{if not (contains .EXTRAS "gpu")}} and not requires_gpu{{end}}
    cmds:
      - >
          uv run pytest -m 'not slow{{.EXTRA_MARKERS}}'
    desc: "Run tests excluding slow scenarios with uv"

  test:slow:
    vars:
      EXTRAS: "{{.EXTRAS | default \"\"}}"
      EXTRA_MARKERS: >-
        {{if not (contains .EXTRAS "git")}} and not requires_git{{end}}\
        {{if not (contains .EXTRAS "nlp")}} and not requires_nlp{{end}}\
        {{if not (contains .EXTRAS "ui")}} and not requires_ui{{end}}\
        {{if not (contains .EXTRAS "vss")}} and not requires_vss{{end}}\
        {{if not (contains .EXTRAS "distributed")}} and not requires_distributed{{end}}\
        {{if not (contains .EXTRAS "analysis")}} and not requires_analysis{{end}}\
        {{if not (contains .EXTRAS "llm")}} and not requires_llm{{end}}\
        {{if not (contains .EXTRAS "parsers")}} and not requires_parsers{{end}}\
        {{if not (contains .EXTRAS "gpu")}} and not requires_gpu{{end}}
    cmds:
      - >
          uv run pytest -m 'slow{{.EXTRA_MARKERS}}'
    desc: "Run slow tests while excluding extras that are not installed"

  test:benchmarks:
    cmds:
      - uv run pytest tests/integration/test_query_performance_benchmark.py -q
    desc: "Run performance benchmark tests with uv"

  coverage:
    vars:
      EXTRAS: "{{.EXTRAS | default .ALL_EXTRAS}}"
      SYNC_EXTRAS:
        sh: |
          set -eu
          extras="{{.VERIFY_BASE_EXTRAS}}"
          if [ -n "{{.EXTRAS}}" ]; then
            extras="$extras {{.EXTRAS}}"
          fi
          dedup=""
          for extra in $extras; do
            case " $dedup " in
              *" $extra "*) ;;
              *) dedup="$dedup $extra" ;;
            esac
          done
          printf '%s\n' "${dedup# }"
      EXTRA_MARKERS: >-
        {{if contains .EXTRAS "git"}}{{else}} and not requires_git{{end}}
        {{if contains .EXTRAS "nlp"}}{{else}} and not requires_nlp{{end}}
        {{if contains .EXTRAS "ui"}}{{else}} and not requires_ui{{end}}
        {{if contains .EXTRAS "vss"}}{{else}} and not requires_vss{{end}}
        {{if contains .EXTRAS "distributed"}}{{else}} and not requires_distributed{{end}}
        {{if contains .EXTRAS "analysis"}}{{else}} and not requires_analysis{{end}}
        {{if contains .EXTRAS "llm"}}{{else}} and not requires_llm{{end}}
        {{if contains .EXTRAS "parsers"}}{{else}} and not requires_parsers{{end}}
        {{if contains .EXTRAS "gpu"}}{{else}} and not requires_gpu{{end}}
    cmds:
      - echo "[coverage] syncing dependencies"
      - |
          uv sync \
            {{range splitList " " .SYNC_EXTRAS}} --extra {{.}}{{end}} \
            {{if contains .SYNC_EXTRAS "gpu"}}--find-links wheels/gpu{{end}}
      - echo "[coverage] erasing previous data"
      - uv run coverage erase
      - echo "[coverage] running unit tests"
      - |
          uv run pytest -vv --maxfail=1 --durations=10 -x tests/unit -m 'not slow' \
            --cov=src --cov-report=term-missing --cov-append
      - echo "[coverage] running integration tests"
      - |
          uv run pytest -vv --maxfail=1 --durations=10 -x tests/integration -m 'not slow' \
            --cov=src --cov-report=term-missing --cov-append
      - echo "[coverage] running targeted tests per extra"
      - |
          set -eu
          extras_requested="{{.EXTRAS}}"
          if [ -z "$extras_requested" ]; then
            echo "[coverage][targeted] skipping; no extras requested"
          else
            for extra in {{.ALL_EXTRAS}}; do
              if ! printf ' %s ' "$extras_requested" | grep -q " ${extra} "; then
                echo "[coverage][targeted][${extra}] skipping; extra not requested"
                continue
              fi
              echo "[coverage][targeted][${extra}] starting"
              uv run pytest -vv --maxfail=1 --durations=10 -x tests/targeted \
                -m "requires_${extra} and not slow" \
                --noconftest --cov=autoresearch.search --cov=autoresearch.storage \
                --cov=autoresearch.orchestration --cov-report=term-missing \
                --cov-report=xml --cov-append
              echo "[coverage][targeted][${extra}] passed"
            done
          fi
      - echo "[coverage] running behavior tests"
      - |
          uv run pytest -vv --maxfail=1 --durations=10 -x tests/behavior -m 'not slow' \
            --cov=src --cov-report=xml --cov-report=term-missing --cov-append
      - echo "[coverage] generating report"
      - uv run coverage report --fail-under={{.COVERAGE_MINIMUM}}
      - echo "[coverage] checking token regression"
      - uv run python scripts/check_token_regression.py --threshold 5
      - echo "[coverage] validating docs"
      - task check-coverage-docs
      - |
          if [ -n "$CI" ]; then
            echo "[coverage] updating coverage docs"
            uv run python scripts/update_coverage_docs.py
          fi
    desc: |
      Run full test suite with coverage reporting.
      Installs all optional extras unless EXTRAS overrides them.
      Include "gpu" to use wheels/gpu.

  verify:preflight:
    cmds:
      - uv run python scripts/check_full_verify_prereqs.py --extras "nlp ui vss git distributed analysis llm parsers gpu"
    desc: "Check optional extras before running verify with all groups"

  verify:
    vars:
      USER_EXTRAS: "{{.EXTRAS | default \"\"}}"
      EXTRAS:
        sh: |
          set -eu
          extras="{{.VERIFY_BASE_EXTRAS}}"
          if [ -n "{{.USER_EXTRAS}}" ]; then
            extras="$extras {{.USER_EXTRAS}}"
          fi
          dedup=""
          for extra in $extras; do
            case " $dedup " in
              *" $extra "*) ;;
              *) dedup="$dedup $extra" ;;
            esac
          done
          printf '%s\n' "${dedup# }"
    cmds:
      - |
          set -eu
          extras="{{.EXTRAS}}"
          export UV_HTTP_TIMEOUT="${UV_HTTP_TIMEOUT:-600}"
          uv sync \
            --python-platform x86_64-manylinux_2_28 \
            $(printf ' --extra %s' $extras) \
            {{if contains .EXTRAS "gpu"}}--find-links wheels/gpu{{end}}
      - task check-env EXTRAS="{{.EXTRAS}}"
      - |
          set -eu
          uv run flake8 src tests
          echo "[verify][lint] flake8 passed"
      - |
          set -eu
          uv run mypy src
          echo "[verify][mypy] src passed"
      - |
          set -eu
          uv run mypy tests/unit tests/integration
          echo "[verify][mypy] tests passed"
      - task: mypy:strict-suite
      - echo "[verify][mypy] strict suite passed"
      - task lint-specs
      - echo "[verify][lint] spec lint passed"
      - task check-release-metadata
      - uv run python scripts/check_spec_tests.py
      - task: coverage
        vars:
          EXTRAS: "{{.USER_EXTRAS}}"
      - uv run coverage html
      - uv run coverage report --fail-under={{.COVERAGE_MINIMUM}}
      - uv run python scripts/check_token_regression.py --threshold 5
      - task check-coverage-docs
      - |-
          {{if and (contains .EXTRAS "distributed") (contains .EXTRAS "analysis")}}
          uv run pytest tests/benchmark -m "slow and requires_distributed and requires_analysis" -q
          {{end}}
    desc: |
      Run linting, type checks, targeted tests, and coverage.
      Installs the `dev-minimal` and `test` extras by default; setting EXTRAS
      adds optional groups (e.g., "gpu") in addition to the baseline.

  release:alpha:
    vars:
      USER_EXTRAS: "{{.EXTRAS | default \"\"}}"
      OPTIONAL_EXTRAS:
        sh: |
          set -eu
          extras="{{.ALL_EXTRAS_NO_GPU}} build"
          if [ -n "{{.USER_EXTRAS}}" ]; then
            extras="$extras {{.USER_EXTRAS}}"
          fi
          dedup=""
          for extra in $extras; do
            case " $dedup " in
              *" $extra "*) ;;
              *) dedup="$dedup $extra" ;;
            esac
          done
          printf '%s\n' "${dedup# }"
      SYNC_EXTRAS:
        sh: |
          set -eu
          extras="{{.VERIFY_BASE_EXTRAS}} {{.OPTIONAL_EXTRAS}}"
          dedup=""
          for extra in $extras; do
            case " $dedup " in
              *" $extra "*) ;;
              *) dedup="$dedup $extra" ;;
            esac
          done
          printf '%s\n' "${dedup# }"
    cmds:
      - echo "[release:alpha] syncing dependencies"
      - |
          uv sync \
            --python-platform x86_64-manylinux_2_28 \
            {{range splitList " " .SYNC_EXTRAS}} --extra {{.}}{{end}} \
            {{if contains .SYNC_EXTRAS "gpu"}}--find-links wheels/gpu{{end}}
      - echo "[release:alpha] running flake8"
      - uv run flake8 src tests
      - echo "[release:alpha] running mypy"
      - uv run mypy src
      - echo "[release:alpha] linting specs"
      - uv run python scripts/lint_specs.py
      - echo "[release:alpha] checking release metadata"
      - uv run python scripts/check_release_metadata.py
      - echo "[release:alpha] running task verify"
      - uv run task verify EXTRAS="{{.OPTIONAL_EXTRAS}}"
      - echo "[release:alpha] running task coverage"
      - uv run task coverage EXTRAS="{{.OPTIONAL_EXTRAS}}"
      - echo "[release:alpha] building distributions"
      - uv run python -m build
      - echo "[release:alpha] checking metadata with twine"
      - uv run twine check dist/*
      - echo "[release:alpha] running TestPyPI dry run"
      - uv run python scripts/publish_dev.py --dry-run
    desc: |
      Run the alpha release readiness sweep.
      Installs dev-minimal, test, and optional extras (minus gpu) by default.
      Pass EXTRAS (e.g., "gpu") to add more optional groups.

  verify:warnings:
    vars:
      USER_EXTRAS: "{{.EXTRAS | default \"\"}}"
    env:
      PYTHONWARNINGS: "error::DeprecationWarning"
    cmds:
      - task verify EXTRAS="{{.USER_EXTRAS}}"
    desc: |
      Run the verify pipeline with DeprecationWarning treated as errors.
      Use after syncing the dev-minimal and test extras so pytest-bdd and
      related plugins are available.

  verify:warnings:log:
    vars:
      USER_EXTRAS: "{{.EXTRAS | default \"\"}}"
      LOG_DIR: "{{.LOG_DIR | default \"baseline/logs\"}}"
    cmds:
      - |
          mkdir -p "{{.LOG_DIR}}"
          timestamp="$(date -u +%Y%m%dT%H%M%SZ)"
          log_path="{{.LOG_DIR}}/verify-warnings-${timestamp}.log"
          LOG_PATH="$log_path" EXTRAS_VALUE="{{.USER_EXTRAS}}" \
            uv run python - <<'PY'
          import os
          import subprocess
          import sys


          def main() -> int:
              log_path = os.environ["LOG_PATH"]
              extras = os.environ.get("EXTRAS_VALUE", "")
              env = os.environ.copy()
              env.pop("LOG_PATH", None)
              env.pop("EXTRAS_VALUE", None)
              if extras:
                  env["EXTRAS"] = extras
              process = subprocess.Popen(
                  ["task", "verify:warnings"],
                  stdout=subprocess.PIPE,
                  stderr=subprocess.STDOUT,
                  env=env,
                  text=True,
              )
              assert process.stdout is not None
              with open(log_path, "w", encoding="utf-8") as log_file:
                  for line in process.stdout:
                      sys.stdout.write(line)
                      sys.stdout.flush()
                      log_file.write(line)
                      log_file.flush()
              return process.wait()


          if __name__ == "__main__":
              sys.exit(main())
          PY
    desc: |
      Run verify:warnings and archive the combined stdout/stderr output to a
      timestamped log file under baseline/logs.

  clean:
    cmds:
      - find . -type d -name '__pycache__' -exec rm -rf {} +
      - find . -type d -name '.mypy_cache' -exec rm -rf {} +
    desc: "Remove Python cache directories"

  bump-version:
    cmds:
      - uv run python scripts/bump_version.py {{.CLI_ARGS}}
    desc: "Update project version numbers"

  benchmark:critical:
    cmds:
      - |
        uv run scripts/orchestrator_perf_sim.py --workers 2 --arrival-rate 3 \
          --service-rate 5 --tasks 50 --mem-per-task 0.5 --benchmark
      - uv run scripts/ranking_sim.py --docs 50 --queries 10 --noise 0.2
      - uv run scripts/storage_concurrency_sim.py --threads 5 --items 10
    desc: "Run orchestrator, search, and storage benchmarks"

  check-baselines:
    cmds:
      - uv run python scripts/check_token_regression.py --threshold 5
    desc: "Validate token usage against baselines with uv"

  check-coverage-docs:
    cmds:
      - uv run python scripts/check_coverage_docs.py --minimum {{.COVERAGE_MINIMUM}}
    desc: "Validate documentation coverage percentage"

  docs:
    cmds:
      - uv run --extra docs mkdocs build
    desc: "Build project documentation"

  wheels:
    deps: [wheel-linux, wheel-windows, wheel-macos]
    desc: "Build wheels for all platforms"

  wheel-linux:
    cmds:
      - uv run cibuildwheel --platform linux --output-dir dist/linux
    desc: "Build Linux wheel with uv"

  wheel-windows:
    cmds:
      - uv run cibuildwheel --platform windows --output-dir dist/windows
    desc: "Build Windows wheel with uv"

  wheel-macos:
    cmds:
      - uv run cibuildwheel --platform macos --output-dir dist/macos
    desc: "Build macOS wheel with uv"


  docker-build:
    deps: [docker-build:linux, docker-build:macos, docker-build:windows]
    desc: "Build Docker images for all platforms"

  docker-build:linux:
    cmds:
      - |
          docker buildx build --load --platform linux/amd64 \
            -f docker/Dockerfile.linux \
            -t autoresearch:linux .
    desc: "Build Linux container image"

  docker-build:macos:
    cmds:
      - |
          docker buildx build --load --platform linux/arm64 \
            -f docker/Dockerfile.macos \
            -t autoresearch:macos-arm .
    desc: "Build macOS ARM container image"

  docker-build:windows:
    cmds:
      - |
          docker buildx build --load --platform windows/amd64 \
            -f docker/Dockerfile.windows \
            -t autoresearch:windows .
    desc: "Build Windows container image"
